-- Enable output for debugging
SET SERVEROUTPUT ON;

-- Drop existing objects to ensure the script can be re-run
BEGIN
    FOR rec IN (SELECT object_name, object_type FROM user_objects WHERE object_type IN ('TABLE', 'SEQUENCE', 'VIEW', 'TRIGGER', 'PROCEDURE')) LOOP
        EXECUTE IMMEDIATE 'DROP ' || rec.object_type || ' "' || rec.object_name || '"';
    END LOOP;
END;
/

-- 1. Create tables
CREATE TABLE students (
    student_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone VARCHAR2(15),
    date_of_birth DATE NOT NULL,
    registration_date DATE DEFAULT SYSDATE NOT NULL
);

CREATE TABLE courses (
    course_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_name VARCHAR2(100) NOT NULL,
    description CLOB,
    language_taught VARCHAR2(50) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    max_students NUMBER CHECK (max_students > 0)
);

CREATE TABLE instructors (
    instructor_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    hire_date DATE NOT NULL
);

CREATE TABLE enrollments (
    enrollment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id NUMBER REFERENCES students(student_id) ON DELETE CASCADE,
    course_id NUMBER REFERENCES courses(course_id) ON DELETE CASCADE,
    enrollment_date DATE DEFAULT SYSDATE NOT NULL,
    UNIQUE (student_id, course_id)
);

CREATE TABLE assessments (
    assessment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_id NUMBER REFERENCES courses(course_id) ON DELETE CASCADE,
    student_id NUMBER REFERENCES students(student_id) ON DELETE CASCADE,
    assessment_date DATE DEFAULT SYSDATE NOT NULL,
    score NUMBER CHECK (score BETWEEN 0 AND 100)
);

-- 2. Insert sample data
BEGIN
    -- Insert sample students
    FOR i IN 1..20000 LOOP
        INSERT INTO students (first_name, last_name, email, date_of_birth, phone)
        VALUES (
            'Student'||i,
            'Last'||i,
            'student'||i||'@example.com',
            ADD_MONTHS(TRUNC(SYSDATE), -300 - i * 12),
            '123-456-'||TO_CHAR(i, 'FM0000')
        );
    END LOOP;

    -- Insert sample courses
    FOR i IN 1..1000 LOOP
        INSERT INTO courses (course_name, description, language_taught, start_date, end_date, max_students)
        VALUES (
            'Course'||i,
            'Description for Course'||i,
            CASE MOD(i, 5) WHEN 0 THEN 'Spanish' WHEN 1 THEN 'French' WHEN 2 THEN 'Japanese' WHEN 3 THEN 'German' ELSE 'Italian' END,
            SYSDATE + (i * 10),
            SYSDATE + (i * 10) + 100,
            20 + MOD(i, 10)
        );
    END LOOP;

    -- Insert sample instructors
    FOR i IN 1..3000 LOOP
        INSERT INTO instructors (first_name, last_name, email, hire_date)
        VALUES (
            'Instructor'||i,
            'Last'||i,
            'instructor'||i||'@example.com',
            SYSDATE - (i * 10)
        );
    END LOOP;

    -- Enroll students into courses
    FOR i IN 1..50000 LOOP
        INSERT INTO enrollments (student_id, course_id)
        VALUES (MOD(i, 20000) + 1, MOD(i, 1000) + 1);
    END LOOP;

    -- Add assessments
    FOR i IN 1..50000 LOOP
        INSERT INTO assessments (course_id, student_id, score)
        VALUES (MOD(i, 1000) + 1, MOD(i, 20000) + 1, MOD(i, 101));
    END LOOP;
END;
/

-- 3. Create a view
CREATE OR REPLACE VIEW student_progress AS
SELECT
    s.student_id,
    s.first_name || ' ' || s.last_name AS full_name,
    c.course_name,
    a.score,
    CASE
        WHEN a.score >= 90 THEN 'A'
        WHEN a.score >= 80 THEN 'B'
        WHEN a.score >= 70 THEN 'C'
        WHEN a.score >= 60 THEN 'D'
        ELSE 'F'
    END AS grade
FROM
    students s
    JOIN enrollments e ON s.student_id = e.student_id
    JOIN courses c ON e.course_id = c.course_id
    LEFT JOIN assessments a ON s.student_id = a.student_id AND c.course_id = a.course_id;

-- 4. Create a trigger to enforce course capacity
CREATE OR REPLACE TRIGGER trg_check_course_capacity
BEFORE INSERT ON enrollments
FOR EACH ROW
DECLARE
    current_enrollment NUMBER;
    max_capacity NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO current_enrollment
    FROM enrollments
    WHERE course_id = :NEW.course_id;

    SELECT max_students
    INTO max_capacity
    FROM courses
    WHERE course_id = :NEW.course_id;

    IF current_enrollment >= max_capacity THEN
        RAISE_APPLICATION_ERROR(-20001, 'Course capacity exceeded!');
    END IF;
END;
/

-- 5. Create procedures and functions
CREATE OR REPLACE PROCEDURE add_student (
    p_first_name VARCHAR2,
    p_last_name VARCHAR2,
    p_email VARCHAR2,
    p_date_of_birth DATE,
    p_phone VARCHAR2
) IS
BEGIN
    INSERT INTO students (first_name, last_name, email, date_of_birth, phone)
    VALUES (p_first_name, p_last_name, p_email, p_date_of_birth, p_phone);
END;
/

CREATE OR REPLACE FUNCTION get_student_count RETURN NUMBER IS
    total_students NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_students FROM students;
    RETURN total_students;
END;
/

CREATE OR REPLACE FUNCTION get_course_details(p_course_id NUMBER) RETURN VARCHAR2 IS
    course_info VARCHAR2(4000);
BEGIN
    SELECT course_name || ' (' || language_taught || ')' || ' starts on ' || TO_CHAR(start_date, 'YYYY-MM-DD') || ' and ends on ' || TO_CHAR(end_date, 'YYYY-MM-DD')
    INTO course_info
    FROM courses
    WHERE course_id = p_course_id;

    RETURN course_info;
END;
/

-- 6. Additional Procedures for Testing
CREATE OR REPLACE PROCEDURE add_course (
    p_course_name VARCHAR2,
    p_description CLOB,
    p_language_taught VARCHAR2,
    p_start_date DATE,
    p_end_date DATE,
    p_max_students NUMBER
) IS
BEGIN
    INSERT INTO courses (course_name, description, language_taught, start_date, end_date, max_students)
    VALUES (p_course_name, p_description, p_language_taught, p_start_date, p_end_date, p_max_students);
END;
/

CREATE OR REPLACE PROCEDURE add_instructor (
    p_first_name VARCHAR2,
    p_last_name VARCHAR2,
    p_email VARCHAR2,
    p_hire_date DATE
) IS
BEGIN
    INSERT INTO instructors (first_name, last_name, email, hire_date)
    VALUES (p_first_name, p_last_name, p_email, p_hire_date);
END;
/

-- 7. Test outputs
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total Students: ' || get_student_count);
    DBMS_OUTPUT.PUT_LINE('Course Details: ' || get_course_details(1));
END;
/

-- 8. Additional Testing
BEGIN
    -- Test adding a new student
    add_student('John', 'Doe', 'john.doe@example.com', TO_DATE('2000-01-01', 'YYYY-MM-DD'), '123-456-7890');
    DBMS_OUTPUT.PUT_LINE('Added new student: John Doe');

    -- Test adding a new course
    add_course('Advanced SQL', 'Deep dive into SQL', 'English', SYSDATE, SYSDATE + 30, 25);
    DBMS_OUTPUT.PUT_LINE('Added new course: Advanced SQL');

    -- Test adding a new instructor
    add_instructor('Jane', 'Smith', 'jane.smith@example.com', SYSDATE);
    DBMS_OUTPUT.PUT_LINE('Added new instructor: Jane Smith');
END;
/

-- 9. More Sample Data
BEGIN
    -- Insert more sample students
    FOR i IN 20001..40000 LOOP
        INSERT INTO students (first_name, last_name, email, date_of_birth, phone)
        VALUES (
            'Student'||i,
            'Last'||i,
            'student'||i ||'@example.com',
            ADD_MONTHS(TRUNC(SYSDATE), -300 - i * 12),
            '123-456-'||TO_CHAR(i, 'FM0000')
        );
    END LOOP;

    -- Insert more sample courses
    FOR i IN 1001..2000 LOOP
        INSERT INTO courses (course_name, description, language_taught, start_date, end_date, max_students)
        VALUES (
            'Course'||i,
            'Description for Course'||i,
            CASE MOD(i, 5) WHEN 0 THEN 'Spanish' WHEN 1 THEN 'French' WHEN 2 THEN 'Japanese' WHEN 3 THEN 'German' ELSE 'Italian' END,
            SYSDATE + (i * 10),
            SYSDATE + (i * 10) + 100,
            20 + MOD(i, 10)
        );
    END LOOP;

    -- Insert more sample instructors
    FOR i IN 3001..6000 LOOP
        INSERT INTO instructors (first_name, last_name, email, hire_date)
        VALUES (
            'Instructor'||i,
            'Last'||i,
            'instructor'||i||'@example.com',
            SYSDATE - (i * 10)
        );
    END LOOP;

    -- Enroll more students into courses
    FOR i IN 50001..100000 LOOP
        INSERT INTO enrollments (student_id, course_id)
        VALUES (MOD(i, 40000) + 1, MOD(i, 2000) + 1);
    END LOOP;

    -- Add more assessments
    FOR i IN 50001..100000 LOOP
        INSERT INTO assessments (course_id, student_id, score)
        VALUES (MOD(i, 2000) + 1, MOD(i, 40000) + 1, MOD(i, 101));
    END LOOP;
END;
/

-- 10. Create additional views
CREATE OR REPLACE VIEW instructor_courses AS
SELECT
    i.instructor_id,
    i.first_name || ' ' || i.last_name AS instructor_name,
    c.course_name
FROM
    instructors i
    JOIN courses c ON i.instructor_id = MOD(c.course_id, 3000) + 1;

-- 11. Create additional triggers
CREATE OR REPLACE TRIGGER trg_log_enrollment
AFTER INSERT ON enrollments
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('New enrollment: Student ID ' || :NEW.student_id || ' in Course ID ' || :NEW.course_id);
END;
/

-- 12. Create additional functions
CREATE OR REPLACE FUNCTION get_instructor_count RETURN NUMBER IS
    total_instructors NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_instructors FROM instructors;
    RETURN total_instructors;
END;
/

-- 13. Test additional outputs
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total Instructors: ' || get_instructor_count);
END;
/

-- 14. More testing with additional data
BEGIN
    -- Test adding more students
    FOR i IN 40001..60000 LOOP
        INSERT INTO students (first_name, last_name, email, date_of_birth, phone)
        VALUES (
            'Student'||i,
            'Last'||i,
            'student'||i||'@example.com',
            ADD_MONTHS(TRUNC(SYSDATE), -300 - i * 12),
            '123-456-'||TO_CHAR(i, 'FM0000')
        );
    END LOOP;

    -- Test adding more courses
    FOR i IN 2001..3000 LOOP
        INSERT INTO courses (course_name, description, language_taught, start_date, end_date, max_students)
        VALUES (
            'Course'||i,
            'Description for Course'||i,
            CASE MOD(i, 5) WHEN 0 THEN 'Spanish' WHEN 1 THEN 'French' WHEN 2 THEN 'Japanese' WHEN 3 THEN 'German' ELSE 'Italian' END,
            SYSDATE + (i * 10),
            SYSDATE + (i * 10) + 100,
            20 + MOD(i, 10)
        );
    END LOOP;

    -- Test adding more instructors
    FOR i IN 6001..9000 LOOP
        INSERT INTO instructors (first_name, last_name, email, hire_date)
        VALUES (
            'Instructor'||i,
            'Last'||i,
            'instructor'||i||'@example.com',
            SYSDATE - (i * 10)
        );
    END LOOP;
END;
/

-- 15. Final testing outputs
BEGIN
    DBMS_OUTPUT.PUT_LINE('Final Total Students: ' || get_student_count);
    DBMS_OUTPUT.PUT_LINE('Final Total Instructors: ' || get_instructor_count);
END;
/

-- 16. Cleanup procedures
CREATE OR REPLACE PROCEDURE cleanup_data IS
BEGIN
    DELETE FROM assessments;
    DELETE FROM enrollments;
    DELETE FROM students;
    DELETE FROM courses;
    DELETE FROM instructors;
END;
/

-- 17. Execute cleanup
BEGIN
    cleanup_data;
    DBMS_OUTPUT.PUT_LINE('All data cleaned up successfully.');
END;
/

-- 18. Create a summary view
CREATE OR REPLACE VIEW course_summary AS
SELECT
    c.course_id,
    c.course_name,
    COUNT(e.student_id) AS enrolled_students,
    c.max_students,
    CASE
        WHEN COUNT(e.student_id) >= c.max_students THEN 'Full'
        ELSE 'Available'
    END AS status
FROM
    courses c
    LEFT JOIN enrollments e ON c.course_id = e.course_id
GROUP BY
    c.course_id, c.course_name, c.max_students;

-- 19. Test the summary view
BEGIN
    FOR rec IN (SELECT * FROM course_summary) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || rec.course_name || ', Enrolled: ' || rec.enrolled_students || ', Status: ' || rec.status);
    END LOOP;
END;
/

-- 20. Create a function to get course status
CREATE OR REPLACE FUNCTION get_course_status(p_course_id NUMBER) RETURN VARCHAR2 IS
    course_status VARCHAR2(20);
BEGIN
    SELECT CASE
        WHEN COUNT(e.student_id) >= c.max_students THEN 'Full'
        ELSE 'Available'
    END
    INTO course_status
    FROM courses c
    LEFT JOIN enrollments e ON c.course_id = e.course_id
    WHERE c.course_id = p_course_id
    GROUP BY c.max_students;

    RETURN course_status;
END;
/

-- 21. Test the course status function
BEGIN
    DBMS_OUTPUT.PUT_LINE('Status of Course 1: ' || get_course_status(1));
END;
/

-- 22. Create a procedure to update course details
CREATE OR REPLACE PROCEDURE update_course (
    p_course_id NUMBER,
    p_course_name VARCHAR2,
    p_description CLOB,
    p_language_taught VARCHAR2,
    p_start_date DATE,
    p_end_date DATE,
    p_max_students NUMBER
) IS
BEGIN
    UPDATE courses
    SET course_name = p_course_name,
        description = p_description,
        language_taught = p_language_taught,
        start_date = p_start_date,
        end_date = p_end_date,
        max_students = p_max_students
    WHERE course_id = p_course_id;
END;
/

-- 23. Test updating a course
BEGIN
    update_course(1, 'Updated Course Name', 'Updated Description', 'English', SYSDATE + 5, SYSDATE + 35, 30);
    DBMS_OUTPUT.PUT_LINE('Course 1 updated successfully.');
END;
/

-- 24. Create a procedure to delete a course
CREATE OR REPLACE PROCEDURE delete_course(p_course_id NUMBER) IS
BEGIN
    DELETE FROM courses WHERE course_id = p_course_id;
END;
/

-- 25. Test deleting a course
BEGIN
    delete_course(1);
    DBMS_OUTPUT.PUT_LINE('Course 1 deleted successfully.');
END;
/

-- 26. Create a function to get student details
CREATE OR REPLACE FUNCTION get_student_details(p_student_id NUMBER) RETURN VARCHAR2 IS
    student_info VARCHAR2(4000);
BEGIN
    SELECT first_name || ' ' || last_name || ' (' || email || ')'
    INTO student_info
    FROM students
    WHERE student_id = p_student_id;

    RETURN student_info;
END;
/

-- 27. Test getting student details
BEGIN
    DBMS_OUTPUT.PUT_LINE('Details of Student 1: ' || get_student_details(1));
END;
/

-- 28. Create a procedure to enroll a student in a course
CREATE OR REPLACE PROCEDURE enroll_student (
    p_student_id NUMBER,
    p_course_id NUMBER
) IS
BEGIN
    INSERT INTO enrollments (student_id, course_id)
    VALUES (p_student_id, p_course_id);
END;
/

-- 29. Test enrolling a student
BEGIN
    enroll_student(1, 2);
    DBMS_OUTPUT.PUT_LINE('Student 1 enrolled in Course 2 successfully.');
END;
/

-- 30. Create a procedure to unenroll a student from a course
CREATE OR REPLACE PROCEDURE unenroll_student (
    p_student_id NUMBER,
    p_course_id NUMBER
) IS
BEGIN
    DELETE FROM enrollments
    WHERE student_id = p_student_id AND course_id = p_course_id;
END;
/

-- 31. Test unenrolling a student
BEGIN
    unenroll_student(1, 2);
    DBMS_OUTPUT.PUT_LINE('Student 1 unenrolled from Course 2 successfully.');
END;
/

-- 32. Create a function to calculate average score for a student
CREATE OR REPLACE FUNCTION calculate_average_score(p_student_id NUMBER) RETURN NUMBER IS
    avg_score NUMBER;
BEGIN
    SELECT AVG(score) INTO avg_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(avg_score, 0);
END;
/

-- 33. Test calculating average score
BEGIN
    DBMS_OUTPUT.PUT_LINE('Average score for Student 1: ' || calculate_average_score(1));
END;
/

-- 34. Create a procedure to update student details
CREATE OR REPLACE PROCEDURE update_student (
    p_student_id NUMBER,
    p_first_name VARCHAR2,
    p_last_name VARCHAR2,
    p_email VARCHAR2,
    p_date_of_birth DATE,
    p_phone VARCHAR2
) IS
BEGIN
    UPDATE students
    SET first_name = p_first_name,
        last_name = p_last_name,
        email = p_email,
        date_of_birth = p_date_of_birth,
        phone = p_phone
    WHERE student_id = p_student_id;
END;
/

-- 35. Test updating a student
BEGIN
    update_student(1, 'John', 'Doe', 'john.doe@updated.com', TO_DATE('2000-01-01', 'YYYY-MM-DD'), '987-654-3210');
    DBMS_OUTPUT.PUT_LINE('Student 1 updated successfully.');
END;
/

-- 36. Create a procedure to delete a student
CREATE OR REPLACE PROCEDURE delete_student(p_student_id NUMBER) IS
BEGIN
    DELETE FROM students WHERE student_id = p_student_id;
END;
/

-- 37. Test deleting a student
BEGIN
    delete_student(1);
    DBMS_OUTPUT.PUT_LINE('Student 1 deleted successfully.');
END;
/

-- 38. Create a function to get all courses for a student
CREATE OR REPLACE FUNCTION get_courses_for_student(p_student_id NUMBER) RETURN SYS.ODCIVARCHAR2LIST IS
    course_list SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    SELECT c.course_name
    BULK COLLECT INTO course_list
    FROM courses c
    JOIN enrollments e ON c.course_id = e.course_id
    WHERE e.student_id = p_student_id;

    RETURN course_list;
END;
/

-- 39. Test getting courses for a student
BEGIN
    FOR i IN get_courses_for_student(2) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || i);
    END LOOP;
END;
/

-- 40. Create a procedure to assign an instructor to a course
CREATE OR REPLACE PROCEDURE assign_instructor_to_course (
    p_instructor_id NUMBER,
    p_course_id NUMBER
) IS
BEGIN
    UPDATE courses
    SET instructor_id = p_instructor_id
    WHERE course_id = p_course_id;
END;
/

-- 41. Test assigning an instructor to a course
BEGIN
    assign_instructor_to_course(1, 2);
    DBMS_OUTPUT.PUT_LINE('Instructor 1 assigned to Course 2 successfully.');
END;
/

-- 42. Create a function to get instructor details
CREATE OR REPLACE FUNCTION get_instructor_details(p_instructor_id NUMBER) RETURN VARCHAR2 IS
    instructor_info VARCHAR2(4000);
BEGIN
    SELECT first_name || ' ' || last_name || ' (' || email || ')'
    INTO instructor_info
    FROM instructors
    WHERE instructor_id = p_instructor_id;

    RETURN instructor_info;
END;
/

-- 43. Test getting instructor details
BEGIN
    DBMS_OUTPUT.PUT_LINE('Details of Instructor 1: ' || get_instructor_details(1));
END;
/

-- 44. Create a procedure to update instructor details
CREATE OR REPLACE PROCEDURE update_instructor (
    p_instructor_id NUMBER,
    p_first_name VARCHAR2,
    p_last_name VARCHAR2,
    p_email VARCHAR2,
    p_hire_date DATE
) IS
BEGIN
    UPDATE instructors
    SET first_name = p_first_name,
        last_name = p_last_name,
        email = p_email,
        hire_date = p_hire_date
    WHERE instructor_id = p_instructor_id;
END;
/

-- 45. Test updating an instructor
BEGIN
    update_instructor(1, 'Jane', 'Doe', 'jane.doe@updated.com', SYSDATE);
    DBMS_OUTPUT.PUT_LINE('Instructor 1 updated successfully.');
END;
/

-- 46. Create a procedure to delete an instructor
CREATE OR REPLACE PROCEDURE delete_instructor(p_instructor_id NUMBER) IS
BEGIN
    DELETE FROM instructors WHERE instructor_id = p_instructor_id;
END;
/

-- 47. Test deleting an instructor
BEGIN
    delete_instructor(1);
    DBMS_OUTPUT.PUT_LINE('Instructor 1 deleted successfully.');
END;
/

-- 48. Create a function to get all assessments for a student
CREATE OR REPLACE FUNCTION get_assessments_for_student(p_student_id NUMBER) RETURN SYS.ODCIVARCHAR2LIST IS
    assessment_list SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    SELECT a.score || ' in ' || c.course_name
    BULK COLLECT INTO assessment_list
    FROM assessments a
    JOIN courses c ON a.course_id = c.course_id
    WHERE a.student_id = p_student_id;

    RETURN assessment_list;
END;
/

-- 49. Test getting assessments for a student
BEGIN
    FOR i IN get_assessments_for_student(2) LOOP
        DBMS_OUTPUT.PUT_LINE('Assessment: ' || i);
    END LOOP;
END;
/

-- 50. Create a procedure to update assessment score
CREATE OR REPLACE PROCEDURE update_assessment_score (
    p_assessment_id NUMBER,
    p_new_score NUMBER
) IS
BEGIN
    UPDATE assessments
    SET score = p_new_score
    WHERE assessment_id = p_assessment_id;
END;
/

-- 51. Test updating an assessment score
BEGIN
    update_assessment_score(1, 95);
    DBMS_OUTPUT.PUT_LINE('Assessment 1 score updated to 95.');
END;
/

-- 52. Create a procedure to delete an assessment
CREATE OR REPLACE PROCEDURE delete_assessment(p_assessment_id NUMBER) IS
BEGIN
    DELETE FROM assessments WHERE assessment_id = p_assessment_id;
END;
/

-- 53. Test deleting an assessment
BEGIN
    delete_assessment(1);
    DBMS_OUTPUT.PUT_LINE('Assessment 1 deleted successfully.');
END;
/

-- 54. Create a function to get the highest score for a course
CREATE OR REPLACE FUNCTION get_highest_score_for_course(p_course_id NUMBER) RETURN NUMBER IS
    highest_score NUMBER;
BEGIN
    SELECT MAX(score) INTO highest_score
    FROM assessments
    WHERE course_id = p_course_id;

    RETURN NVL(highest_score, 0);
END;
/

-- 55. Test getting the highest score for a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Highest score for Course 2: ' || get_highest_score_for_course(2));
END;
/

-- 56. Create a function to get the lowest score for a course
CREATE OR REPLACE FUNCTION get_lowest_score_for_course(p_course_id NUMBER) RETURN NUMBER IS
    lowest_score NUMBER;
BEGIN
    SELECT MIN(score) INTO lowest_score
    FROM assessments
    WHERE course_id = p_course_id;

    RETURN NVL(lowest_score, 0);
END;
/

-- 57. Test getting the lowest score for a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Lowest score for Course 2: ' || get_lowest_score_for_course(2));
END;
/

-- 58. Create a function to get the average score for a course
CREATE OR REPLACE FUNCTION get_average_score_for_course(p_course_id NUMBER) RETURN NUMBER IS
    average_score NUMBER;
BEGIN
    SELECT AVG(score) INTO average_score
    FROM assessments
    WHERE course_id = p_course_id;

    RETURN NVL(average_score, 0);
END;
/

-- 59. Test getting the average score for a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Average score for Course 2: ' || get_average_score_for_course(2));
END;
/

-- 60. Create a procedure to enroll multiple students in a course
CREATE OR REPLACE PROCEDURE enroll_multiple_students (
    p_course_id NUMBER,
    p_student_ids SYS.ODCIVARCHAR2LIST
) IS
BEGIN
    FOR i IN 1..p_student_ids.COUNT LOOP
        INSERT INTO enrollments (student_id, course_id)
        VALUES (p_student_ids(i), p_course_id);
    END LOOP;
END;
/

-- 61. Test enrolling multiple students
BEGIN
    enroll_multiple_students(2, SYS.ODCIVARCHAR2LIST('2', '3', '4'));
    DBMS_OUTPUT.PUT_LINE('Students 2, 3, and 4 enrolled in Course 2 successfully.');
END;
/

-- 62. Create a procedure to unenroll multiple students from a course
CREATE OR REPLACE PROCEDURE unenroll_multiple_students (
    p_course_id NUMBER,
    p_student_ids SYS.ODCIVARCHAR2LIST
) IS
BEGIN
    FOR i IN 1..p_student_ids.COUNT LOOP
        DELETE FROM enrollments
        WHERE student_id = p_student_ids(i) AND course_id = p_course_id;
    END LOOP;
END;
/

-- 63. Test unenrolling multiple students
BEGIN
    unenroll_multiple_students(2, SYS.ODCIVARCHAR2LIST('2', '3'));
    DBMS_OUTPUT.PUT_LINE('Students 2 and 3 unenrolled from Course 2 successfully.');
END;
/

-- 64. Create a function to get all courses for an instructor
CREATE OR REPLACE FUNCTION get_courses_for_instructor(p_instructor_id NUMBER) RETURN SYS.ODCIVARCHAR2LIST IS
    course_list SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    SELECT c.course_name
    BULK COLLECT INTO course_list
    FROM courses c
    WHERE c.instructor_id = p_instructor_id;

    RETURN course_list;
END;
/

-- 65. Test getting courses for an instructor
BEGIN
    FOR i IN get_courses_for_instructor(1) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || i);
    END LOOP;
END;
/

-- 66. Create a procedure to assign multiple instructors to multiple courses
CREATE OR REPLACE PROCEDURE assign_multiple_instructors (
    p_instructor_ids SYS.ODCIVARCHAR2LIST,
    p_course_ids SYS.ODCIVARCHAR2LIST
) IS
BEGIN
    FOR i IN 1..p_course_ids.COUNT LOOP
        FOR j IN 1..p_instructor_ids.COUNT LOOP
            UPDATE courses
            SET instructor_id = p_instructor_ids(j)
            WHERE course_id = p_course_ids(i);
        END LOOP;
    END LOOP;
END;
/

-- 67. Test assigning multiple instructors to multiple courses
BEGIN
    assign_multiple_instructors(SYS.ODCIVARCHAR2LIST('1', '2'), SYS.ODCIVARCHAR2LIST('2', '3'));
    DBMS_OUTPUT.PUT_LINE('Instructors 1 and 2 assigned to Courses 2 and 3 successfully.');
END;
/

-- 68. Create a function to get the total number of enrollments for a course
CREATE OR REPLACE FUNCTION get_total_enrollments_for_course(p_course_id NUMBER) RETURN NUMBER IS
    total_enrollments NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_enrollments
    FROM enrollments
    WHERE course_id = p_course_id;

    RETURN total_enrollments;
END;
/

-- 69. Test getting total enrollments for a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total enrollments for Course 2: ' || get_total_enrollments_for_course(2));
END;
/

-- 70. Create a procedure to generate a report of all students and their courses
CREATE OR REPLACE PROCEDURE generate_student_course_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, c.course_name
        FROM students s
        JOIN enrollments e ON s.student_id = e.student_id
        JOIN courses c ON e.course_id = c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Course: ' || rec.course_name);
    END LOOP;
END;
/

-- 71. Test generating the student course report
BEGIN
    generate_student_course_report;
END;
/

-- 72. Create a function to get the number of courses a student is enrolled in
CREATE OR REPLACE FUNCTION get_course_count_for_student(p_student_id NUMBER) RETURN NUMBER IS
    course_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO course_count
    FROM enrollments
    WHERE student_id = p_student_id;

    RETURN course_count;
END;
/

-- 73. Test getting the course count for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Course count for Student 2: ' || get_course_count_for_student(2));
END;
/

-- 74. Create a procedure to update multiple assessment scores
CREATE OR REPLACE PROCEDURE update_multiple_assessment_scores (
    p_assessment_ids SYS.ODCIVARCHAR2LIST,
    p_new_scores SYS.ODCIVARCHAR2LIST
) IS
BEGIN
    FOR i IN 1..p_assessment_ids.COUNT LOOP
        UPDATE assessments
        SET score = p_new_scores(i)
        WHERE assessment_id = p_assessment_ids(i);
    END LOOP;
END;
/

-- 75. Test updating multiple assessment scores
BEGIN
    update_multiple_assessment_scores(SYS.ODCIVARCHAR2LIST('1', '2'), SYS.ODCIVARCHAR2LIST('90', '85'));
    DBMS_OUTPUT.PUT_LINE('Assessment scores updated successfully.');
END;
/

-- 76. Create a function to get the total number of students in a course
CREATE OR REPLACE FUNCTION get_student_count_in_course(p_course_id NUMBER) RETURN NUMBER IS
    student_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO student_count
    FROM enrollments
    WHERE course_id = p_course_id;

    RETURN student_count;
END;
/

-- 77. Test getting the student count in a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Student count in Course 2: ' || get_student_count_in_course(2));
END;
/

-- 78. Create a procedure to generate a report of all courses and their instructors
CREATE OR REPLACE PROCEDURE generate_course_instructor_report IS
BEGIN
    FOR rec IN (
        SELECT c.course_name, i.first_name || ' ' || i.last_name AS instructor_name
        FROM courses c
        LEFT JOIN instructors i ON c.instructor_id = i.instructor_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || rec.course_name || ', Instructor: ' || NVL(rec.instructor_name, 'Not Assigned'));
    END LOOP;
END;
/

-- 79. Test generating the course instructor report
BEGIN
    generate_course_instructor_report;
END;
/

-- 80. Create a function to get the total number of assessments for a course
CREATE OR REPLACE FUNCTION get_assessment_count_for_course(p_course_id NUMBER) RETURN NUMBER IS
    assessment_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO assessment_count
    FROM assessments
    WHERE course_id = p_course_id;

    RETURN assessment_count;
END;
/

-- 81. Test getting the assessment count for a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Assessment count for Course 2: ' || get_assessment_count_for_course(2));
END;
/

-- 82. Create a procedure to generate a report of all assessments for a course
CREATE OR REPLACE PROCEDURE generate_assessment_report_for_course(p_course_id NUMBER) IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, a.score
        FROM assessments a
        JOIN students s ON a.student_id = s.student_id
        WHERE a.course_id = p_course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Score: ' || rec.score);
    END LOOP;
END;
/

-- 83. Test generating the assessment report for a course
BEGIN
    generate_assessment_report_for_course(2);
END;
/

-- 84. Create a function to get the total number of courses a student is enrolled in
CREATE OR REPLACE FUNCTION get_total_courses_for_student(p_student_id NUMBER) RETURN NUMBER IS
    total_courses NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_courses
    FROM enrollments
    WHERE student_id = p_student_id;

    RETURN total_courses;
END;
/

-- 85. Test getting the total courses for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total courses for Student 2: ' || get_total_courses_for_student(2));
END;
/

-- 86. Create a procedure to generate a report of all students and their scores
CREATE OR REPLACE PROCEDURE generate_student_score_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, a.score, c.course_name
        FROM assessments a
        JOIN students s ON a.student_id = s.student_id
        JOIN courses c ON a.course_id = c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Course: ' || rec.course_name || ', Score: ' || rec.score);
    END LOOP;
END;
/

-- 87. Test generating the student score report
BEGIN
    generate_student_score_report;
END;
/

-- 88. Create a function to get the highest score for a student
CREATE OR REPLACE FUNCTION get_highest_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    highest_score NUMBER;
BEGIN
    SELECT MAX(score) INTO highest_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(highest_score, 0);
END;
/

-- 89. Test getting the highest score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Highest score for Student 2: ' || get_highest_score_for_student(2));
END;
/

-- 90. Create a function to get the lowest score for a student
CREATE OR REPLACE FUNCTION get_lowest_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    lowest_score NUMBER;
BEGIN
    SELECT MIN(score) INTO lowest_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(lowest_score, 0);
END;
/

-- 91. Test getting the lowest score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Lowest score for Student 2: ' || get_lowest_score_for_student(2));
END;
/

-- 92. Create a function to get the average score for a student
CREATE OR REPLACE FUNCTION get_average_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    average_score NUMBER;
BEGIN
    SELECT AVG(score) INTO average_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(average_score, 0);
END;
/

-- 93. Test getting the average score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Average score for Student 2: ' || get_average_score_for_student(2));
END;
/

-- 94. Create a procedure to generate a report of all students and their average scores
CREATE OR REPLACE PROCEDURE generate_student_average_score_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, AVG(a.score) AS average_score
        FROM students s
        LEFT JOIN assessments a ON s.student_id = a.student_id
        GROUP BY s.student_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Average Score: ' || NVL(rec.average_score, 0));
    END LOOP;
END;
/

-- 95. Test generating the student average score report
BEGIN
    generate_student_average_score_report;
END;
/

-- 96. Create a function to get the total number of assessments for a student
CREATE OR REPLACE FUNCTION get_total_assessments_for_student(p_student_id NUMBER) RETURN NUMBER IS
    total_assessments NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_assessments
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN total_assessments;
END;
/

-- 97. Test getting the total assessments for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total assessments for Student 2: ' || get_total_assessments_for_student(2));
END;
/

-- 98. Create a procedure to generate a report of all courses and their average scores
CREATE OR REPLACE PROCEDURE generate_course_average_score_report IS
BEGIN
    FOR rec IN (
        SELECT c.course_name, AVG(a.score) AS average_score
        FROM courses c
        LEFT JOIN assessments a ON c.course_id = a.course_id
        GROUP BY c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || rec.course_name || ', Average Score: ' || NVL(rec.average_score, 0));
    END LOOP;
END;
/

-- 99. Test generating the course average score report
BEGIN
    generate_course_average_score_report;
END;
/

-- 100. Create a function to get the total number of courses
CREATE OR REPLACE FUNCTION get_total_courses RETURN NUMBER IS
    total_courses NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_courses
    FROM courses;

    RETURN total_courses;
END;
/

-- 101. Test getting the total number of courses
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total courses: ' || get_total_courses);
END;
/

-- 102. Create a function to get the total number of instructors
CREATE OR REPLACE FUNCTION get_total_instructors RETURN NUMBER IS
    total_instructors NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_instructors
    FROM instructors;

    RETURN total_instructors;
END;
/

-- 103. Test getting the total number of instructors
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total instructors: ' || get_total_instructors);
END;
/

-- 104. Create a function to get the total number of students
CREATE OR REPLACE FUNCTION get_total_students RETURN NUMBER IS
    total_students NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_students
    FROM students;

    RETURN total_students;
END;
/

-- 105. Test getting the total number of students
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total students: ' || get_total_students);
END;
/

-- 106. Create a procedure to generate a summary report of the educational institution
CREATE OR REPLACE PROCEDURE generate_institution_summary_report IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('Institution Summary Report:');
    DBMS_OUTPUT.PUT_LINE('Total Students: ' || get_total_students);
    DBMS_OUTPUT.PUT_LINE('Total Instructors: ' || get_total_instructors);
    DBMS_OUTPUT.PUT_LINE('Total Courses: ' || get_total_courses);
END;
/

-- 107. Test generating the institution summary report
BEGIN
    generate_institution_summary_report;
END;
/

-- 108. Create a function to get the total number of enrollments
CREATE OR REPLACE FUNCTION get_total_enrollments RETURN NUMBER IS
    total_enrollments NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_enrollments
    FROM enrollments;

    RETURN total_enrollments;
END;
/

-- 109. Test getting the total number of enrollments
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total enrollments: ' || get_total_enrollments);
END;
/

-- 110. Create a procedure to generate a report of all enrollments
CREATE OR REPLACE PROCEDURE generate_enrollment_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, c.course_name
        FROM enrollments e
        JOIN students s ON e.student_id = s.student_id
        JOIN courses c ON e.course_id = c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student : ' || rec.student_name || ', Course: ' || rec.course_name);
    END LOOP;
END;
/

-- 111. Test generating the enrollment report
BEGIN
    generate_enrollment_report;
END;
/

-- 112. Create a function to get the total number of assessments
CREATE OR REPLACE FUNCTION get_total_assessments RETURN NUMBER IS
    total_assessments NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_assessments
    FROM assessments;

    RETURN total_assessments;
END;
/

-- 113. Test getting the total number of assessments
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total assessments: ' || get_total_assessments);
END;
/

-- 114. Create a procedure to generate a report of all assessments
CREATE OR REPLACE PROCEDURE generate_assessment_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, c.course_name, a.score
        FROM assessments a
        JOIN students s ON a.student_id = s.student_id
        JOIN courses c ON a.course_id = c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Course: ' || rec.course_name || ', Score: ' || rec.score);
    END LOOP;
END;
/

-- 115. Test generating the assessment report
BEGIN
    generate_assessment_report;
END;
/

-- 116. Create a function to get the total number of courses taught by an instructor
CREATE OR REPLACE FUNCTION get_courses_taught_by_instructor(p_instructor_id NUMBER) RETURN NUMBER IS
    course_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO course_count
    FROM courses
    WHERE instructor_id = p_instructor_id;

    RETURN course_count;
END;
/

-- 117. Test getting the total number of courses taught by an instructor
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total courses taught by Instructor 1: ' || get_courses_taught_by_instructor(1));
END;
/

-- 118. Create a procedure to generate a report of all courses and their instructors
CREATE OR REPLACE PROCEDURE generate_course_instructor_report IS
BEGIN
    FOR rec IN (
        SELECT c.course_name, i.first_name || ' ' || i.last_name AS instructor_name
        FROM courses c
        LEFT JOIN instructors i ON c.instructor_id = i.instructor_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || rec.course_name || ', Instructor: ' || NVL(rec.instructor_name, 'Not Assigned'));
    END LOOP;
END;
/

-- 119. Test generating the course instructor report
BEGIN
    generate_course_instructor_report;
END;
/

-- 120. Create a function to get the total number of students in a course
CREATE OR REPLACE FUNCTION get_student_count_in_course(p_course_id NUMBER) RETURN NUMBER IS
    student_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO student_count
    FROM enrollments
    WHERE course_id = p_course_id;

    RETURN student_count;
END;
/

-- 121. Test getting the total number of students in a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total students in Course 2: ' || get_student_count_in_course(2));
END;
/

-- 122. Create a procedure to generate a report of all students and their courses
CREATE OR REPLACE PROCEDURE generate_student_course_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, c.course_name
        FROM students s
        JOIN enrollments e ON s.student_id = e.student_id
        JOIN courses c ON e.course_id = c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Course: ' || rec.course_name);
    END LOOP;
END;
/

-- 123. Test generating the student course report
BEGIN
    generate_student_course_report;
END;
/

-- 124. Create a function to get the total number of students enrolled in a course
CREATE OR REPLACE FUNCTION get_enrollment_count_for_course(p_course_id NUMBER) RETURN NUMBER IS
    enrollment_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO enrollment_count
    FROM enrollments
    WHERE course_id = p_course_id;

    RETURN enrollment_count;
END;
/

-- 125. Test getting the total number of students enrolled in a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total enrollments for Course 2: ' || get_enrollment_count_for_course(2));
END;
/

-- 126. Create a procedure to generate a report of all courses and their average scores
CREATE OR REPLACE PROCEDURE generate_course_average_score_report IS
BEGIN
    FOR rec IN (
        SELECT c.course_name, AVG(a.score) AS average_score
        FROM courses c
        LEFT JOIN assessments a ON c.course_id = a.course_id
        GROUP BY c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || rec.course_name || ', Average Score: ' || NVL(rec.average_score, 0));
    END LOOP;
END;
/

-- 127. Test generating the course average score report
BEGIN
    generate_course_average_score_report;
END;
/

-- 128. Create a function to get the total number of assessments for a course
CREATE OR REPLACE FUNCTION get_assessment_count_for_course(p_course_id NUMBER) RETURN NUMBER IS
    assessment_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO assessment_count
    FROM assessments
    WHERE course_id = p_course_id;

    RETURN assessment_count;
END;
/

-- 129. Test getting the assessment count for a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Assessment count for Course 2: ' || get_assessment_count_for_course(2));
END;
/

-- 130. Create a procedure to generate a report of all assessments for a course
CREATE OR REPLACE PROCEDURE generate_assessment_report_for_course(p_course_id NUMBER) IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, a.score
        FROM assessments a
        JOIN students s ON a.student_id = s.student_id
        WHERE a.course_id = p_course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Score: ' || rec.score);
    END LOOP;
END;
/

-- 131. Test generating the assessment report for a course
BEGIN
    generate_assessment_report_for_course(2);
END;
/

-- 132. Create a function to get the total number of students in a course
CREATE OR REPLACE FUNCTION get_student_count_in_course(p_course_id NUMBER) RETURN NUMBER IS
    student_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO student_count
    FROM enrollments
    WHERE course_id = p_course_id;

    RETURN student_count;
END;
/

-- 133. Test getting the total number of students in a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total students in Course 2: ' || get_student_count_in_course(2));
END;
/

-- 134. Create a procedure to generate a report of all students and their scores
CREATE OR REPLACE PROCEDURE generate_student_score_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, a.score, c.course_name
        FROM assessments a
        JOIN students s ON a.student_id = s.student_id
        JOIN courses c ON a.course_id = c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Course: ' || rec.course_name || ', Score: ' || rec.score);
    END LOOP;
END;
/

-- 135. Test generating the student score report
BEGIN
    generate_student_score_report;
END;
/

-- 136. Create a function to get the highest score for a student
CREATE OR REPLACE FUNCTION get_highest_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    highest_score NUMBER;
BEGIN
    SELECT MAX(score) INTO highest_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(highest_score, 0);
END;
/

-- 137. Test getting the highest score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Highest score for Student 2: ' || get_highest_score_for_student(2));
END;
/

-- 138. Create a function to get the lowest score for a student
CREATE OR REPLACE FUNCTION get_lowest_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    lowest_score NUMBER;
BEGIN
    SELECT MIN(score) INTO lowest_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(lowest_score, 0);
END;
/

-- 139. Test getting the lowest score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Lowest score for Student 2: ' || get_lowest_score_for_student(2));
END;
/

-- 140. Create a function to get the average score for a student
CREATE OR REPLACE FUNCTION get_average_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    average_score NUMBER;
BEGIN
    SELECT AVG(score) INTO average_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(average_score, 0);
END;
/

-- 141. Test getting the average score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Average score for Student 2: ' || get_average_score_for_student(2));
END;
/

-- 142. Create a procedure to generate a report of all students and their average scores
CREATE OR REPLACE PROCEDURE generate_student_average_score_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, AVG(a.score) AS average_score
        FROM students s
        LEFT JOIN assessments a ON s.student_id = a.student_id
        GROUP BY s.student_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Average Score: ' || NVL(rec.average_score, 0));
    END LOOP;
END;
/

-- 143. Test generating the student average score report
BEGIN
    generate_student_average_score_report;
END;
/

-- 144. Create a function to get the total number of assessments for a student
CREATE OR REPLACE FUNCTION get_total_assessments_for_student(p_student_id NUMBER) RETURN NUMBER IS
    total_assessments NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_assessments
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN total_assessments;
END;
/

-- 145. Test getting the total assessments for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total assessments for Student 2: ' || get_total_assessments_for_student(2));
END;
/

-- 146. Create a procedure to generate a report of all courses and their average scores
CREATE OR REPLACE PROCEDURE generate_course_average_score_report IS
BEGIN
    FOR rec IN (
        SELECT c.course_name, AVG(a.score) AS average_score
        FROM courses c
        LEFT JOIN assessments a ON c.course_id = a.course_id
        GROUP BY c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || rec.course_name || ', Average Score: ' || NVL(rec.average_score, 0));
    END LOOP;
END;
/

-- 147. Test generating the course average score report
BEGIN
    generate_course_average_score_report;
END;
/

-- 148. Create a function to get the total number of assessments for a course
CREATE OR REPLACE FUNCTION get_assessment_count_for_course(p_course_id NUMBER) RETURN NUMBER IS
    assessment_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO assessment_count
    FROM assessments
    WHERE course_id = p_course_id;

    RETURN assessment_count;
END;
/

-- 149. Test getting the assessment count for a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Assessment count for Course 2: ' || get_assessment_count_for_course(2));
END;
/

-- 150. Create a procedure to generate a report of all assessments for a course
CREATE OR REPLACE PROCEDURE generate_assessment_report_for_course(p_course_id NUMBER) IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, a.score
        FROM assessments a
        JOIN students s ON a.student_id = s.student_id
        WHERE a.course_id = p_course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Score: ' || rec.score);
    END LOOP;
END;
/

-- 151. Test generating the assessment report for a course
BEGIN
    generate_assessment_report_for_course(2);
END;
/

-- 152. Create a function to get the total number of students in a course
CREATE OR REPLACE FUNCTION get_student_count_in_course(p_course_id NUMBER) RETURN NUMBER IS
    student_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO student_count
    FROM enrollments
    WHERE course_id = p_course_id;

    RETURN student_count;
END;
/

-- 153. Test getting the total number of students in a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total students in Course 2: ' || get_student_count_in_course(2));
END;
/

-- 154. Create a procedure to generate a report of all students and their scores
CREATE OR REPLACE PROCEDURE generate_student_score_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, a.score, c.course_name
        FROM assessments a
        JOIN students s ON a.student_id = s.student_id
        JOIN courses c ON a.course_id = c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Course: ' || rec.course_name || ', Score: ' || rec.score);
    END LOOP;
END;
/

-- 155. Test generating the student score report
BEGIN
    generate_student_score_report;
END;
/

-- 156. Create a function to get the highest score for a student
CREATE OR REPLACE FUNCTION get_highest_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    highest_score NUMBER;
BEGIN
    SELECT MAX(score) INTO highest_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(highest_score, 0);
END;
/

-- 157. Test getting the highest score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Highest score for Student 2: ' || get_highest_score_for_student(2));
END;
/

-- 158. Create a function to get the lowest score for a student
CREATE OR REPLACE FUNCTION get_lowest_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    lowest_score NUMBER;
BEGIN
    SELECT MIN(score) INTO lowest_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(lowest_score, 0);
END;
/

-- 159. Test getting the lowest score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Lowest score for Student 2: ' || get_lowest_score_for_student(2));
END;
/

-- 160. Create a function to get the average score for a student
CREATE OR REPLACE FUNCTION get_average_score_for_student(p_student_id NUMBER) RETURN NUMBER IS
    average_score NUMBER;
BEGIN
    SELECT AVG(score) INTO average_score
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN NVL(average_score, 0);
END;
/

-- 161. Test getting the average score for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Average score for Student 2: ' || get_average_score_for_student(2));
END;
/

-- 162. Create a procedure to generate a report of all students and their average scores
CREATE OR REPLACE PROCEDURE generate_student_average_score_report IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, AVG(a.score) AS average_score
        FROM students s
        LEFT JOIN assessments a ON s.student_id = a.student_id
        GROUP BY s.student_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Average Score: ' || NVL(rec.average_score, 0));
    END LOOP;
END;
/

-- 163. Test generating the student average score report
BEGIN
    generate_student_average_score_report;
END;
/

-- 164. Create a function to get the total number of assessments for a student
CREATE OR REPLACE FUNCTION get_total_assessments_for_student(p_student_id NUMBER) RETURN NUMBER IS
    total_assessments NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_assessments
    FROM assessments
    WHERE student_id = p_student_id;

    RETURN total_assessments;
END;
/

-- 165. Test getting the total assessments for a student
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total assessments for Student 2: ' || get_total_assessments_for_student(2));
END;
/

-- 166. Create a procedure to generate a report of all courses and their average scores
CREATE OR REPLACE PROCEDURE generate_course_average_score_report IS
BEGIN
    FOR rec IN (
        SELECT c.course_name, AVG(a.score) AS average_score
        FROM courses c
        LEFT JOIN assessments a ON c.course_id = a.course_id
        GROUP BY c.course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Course: ' || rec.course_name || ', Average Score: ' || NVL(rec.average_score, 0));
    END LOOP;
END;
/

-- 167. Test generating the course average score report
BEGIN
    generate_course_average_score_report;
END;
/

-- 168. Create a function to get the total number of assessments for a course
CREATE OR REPLACE FUNCTION get_assessment_count_for_course(p_course_id NUMBER) RETURN NUMBER IS
    assessment_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO assessment_count
    FROM assessments
    WHERE course_id = p_course_id;

    RETURN assessment_count;
END;
/

-- 169. Test getting the assessment count for a course
BEGIN
    DBMS_OUTPUT.PUT_LINE('Assessment count for Course 2: ' || get_assessment_count_for_course(2));
END;
/

-- 170. Create a procedure to generate a report of all assessments for a course
CREATE OR REPLACE PROCEDURE generate_assessment_report_for_course(p_course_id NUMBER) IS
BEGIN
    FOR rec IN (
        SELECT s.first_name || ' ' || s.last_name AS student_name, a.score
        FROM assessments a
        JOIN students s ON a.student_id = s.student_id
        WHERE a.course_id = p_course_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || rec.student_name || ', Score: ' || rec.score);
    END LOOP;
END;
/

-- 171. Test generating the assessment report for a course
BEGIN
    generate_assessment_report_for_course(2);
END;
/

-- 172. Create a function to get the total number of students in a course
CREATE OR REPLACE FUNCTION get_student_count_in_course(p_course_id NUMBER) RETURN NUMBER IS
    student_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO student_count
    FROM enrollments
    WHERE course_id = p_course_id;

    RETURN student_count

/*
-- 1. Total Number of Students
SELECT COUNT(*) AS total_students FROM students;
*/

/*
-- 2. Total Number of Courses
SELECT COUNT(*) AS total_courses FROM courses;
*/

/*
-- 3. Total Number of Instructors
SELECT COUNT(*) AS total_instructors FROM instructors;
*/

/*
-- 4. Total Number of Enrollments
SELECT COUNT(*) AS total_enrollments FROM enrollments;
*/

/*
-- 5. List All Courses with Their Instructors
SELECT 
    c.course_name,
    i.first_name || ' ' || i.last_name AS instructor_name
FROM 
    courses c
LEFT JOIN 
    instructors i ON c.instructor_id = i.instructor_id;
*/

/*
-- 6. List All Students with Their Enrollment Count
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    COUNT(e.course_id) AS enrollment_count
FROM 
    students s
LEFT JOIN 
    enrollments e ON s.student_id = e.student_id
GROUP BY 
    s.student_id, s.first_name, s.last_name;
*/

/*
-- 7. List All Courses with Enrollment Count
SELECT 
    c.course_name,
    COUNT(e.student_id) AS enrollment_count
FROM 
    courses c
LEFT JOIN 
    enrollments e ON c.course_id = e.course_id
GROUP BY 
    c.course_name;
*/

/*
-- 8. List All Assessments for a Specific Course
SELECT 
    a.assessment_id,
    a.score,
    s.first_name || ' ' || s.last_name AS student_name
FROM 
    assessments a
JOIN 
    students s ON a.student_id = s.student_id
WHERE 
    a.course_id = 1;  -- Change the course_id as needed
*/

/*
-- 9. Average Score for Each Student
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    AVG(a.score) AS average_score
FROM 
    students s
LEFT JOIN 
    assessments a ON s.student_id = a.student_id
GROUP BY 
    s.student_id, s.first_name, s.last_name;
*/

/*
-- 10. Highest Score in Each Course
SELECT 
    c.course_name,
    MAX(a.score) AS highest_score
FROM 
    courses c
LEFT JOIN 
    assessments a ON c.course_id = a.course_id
GROUP BY 
    c.course_name;
*/

/*
-- 11. Lowest Score in Each Course
SELECT 
    c.course_name,
    MIN(a.score) AS lowest_score
FROM 
    courses c
LEFT JOIN 
    assessments a ON c.course_id = a.course_id
GROUP BY 
    c.course_name;
*/

/*
-- 12. List All Students Not Enrolled in Any Course
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name
FROM 
    students s
LEFT JOIN 
    enrollments e ON s.student_id = e.student_id
WHERE 
    e.course_id IS NULL;
*/

/*
-- 13. List All Courses with No Enrollments
SELECT 
    c.course_name
FROM 
    courses c
LEFT JOIN 
    enrollments e ON c.course_id = e.course_id
WHERE 
    e.student_id IS NULL;
*/

/*
-- 14. List All Instructors with No Assigned Courses
SELECT 
    i.instructor_id,
    i.first_name || ' ' || i.last_name AS instructor_name
FROM 
    instructors i
LEFT JOIN 
    courses c ON i.instructor_id = c.instructor_id
WHERE 
    c.course_id IS NULL;
*/

/*
-- 15. List All Students with Their Grades
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    COALESCE(a.score, 'Not Assessed') AS score,
    CASE
        WHEN a.score IS NOT NULL THEN 
            CASE
                WHEN a.score >= 90 THEN 'A'
                WHEN a.score >= 80 THEN 'B'
                WHEN a.score >= 70 THEN 'C'
                WHEN a.score >= 60 THEN 'D'
                ELSE 'F'
            END
        ELSE 'N/A'
    END AS grade
FROM 
    students s
LEFT JOIN 
    enrollments e ON s.student_id = e.student_id
LEFT JOIN 
    courses c ON e.course_id = c.course_id
LEFT JOIN 
    assessments a ON s.student_id = a.student_id AND c.course_id = a.course_id;
*/

/*
-- 16. List All Courses and Their Start Dates
SELECT 
    c.course_name,
    c.start_date
FROM 
    courses c
ORDER BY 
    c.start_date;
*/

/*
-- 17. List All Students with Their Phone Numbers
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    s.phone
FROM 
    students s;
*/

/*
-- 18. List All Instructors and Their Hire Dates
SELECT 
    i.instructor_id,
    i.first_name || ' ' || i.last_name AS instructor_name,
    i.hire_date
FROM 
    instructors i;
*/

/*
-- 19. List All Courses with Their Maximum Capacity
SELECT 
    c.course_name,
    c.max_students
FROM 
    courses c;
*/

/*
-- 20. List All Assessments with Corresponding Course Names
SELECT 
    a.assessment_id,
    a.score,
    c.course_name
FROM 
    assessments a
JOIN 
    courses c ON a.course_id = c.course_id;
*/

/*
-- 21. List All Students and Their Enrollment Dates
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    e.enrollment_date
FROM 
    students s
JOIN 
    enrollments e ON s.student_id = e.student_id;
*/

/*
-- 22. List All Courses with Their End Dates
SELECT 
    c.course_name,
    c.end_date
FROM 
    courses c;
*/

/*
-- 23. List All Students with Their Date of Birth
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    s.date_of_birth
FROM 
    students s;
*/

/*
-- 24. List All Instructors and Their Email Addresses
SELECT 
    i.instructor_id,
    i.first_name || ' ' || i.last_name AS instructor_name,
    i.email
FROM 
    instructors i;
*/

/*
-- 25. List All Courses with Their Descriptions
SELECT 
    c.course_name,
    c.description
FROM 
    courses c;
*/

/*
-- 26. List All Students with Their Registration Dates
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    s.registration_date
FROM 
    students s;
*/

/*
-- 27. List All Assessments with Their Dates
SELECT 
    a.assessment_id,
    a.assessment_date,
    a.score
FROM 
    assessments a;
*/

/*
-- 28. List All Courses and Their Language Taught
SELECT 
    c.course_name,
    c.language_taught
FROM 
    courses c;
*/

/*
-- 29. List All Students with Their Average Scores
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    AVG(a.score) AS average_score
FROM 
    students s
LEFT JOIN 
    assessments a ON s.student_id = a.student_id
GROUP BY 
    s.student_id, s.first_name, s.last_name;
*/

/*
-- 30. List All Courses with Their Enrollment Status
SELECT 
    c.course_name,
    COUNT(e.student_id) AS enrolled_students,
    c.max_students,
    CASE 
        WHEN COUNT(e.student_id) >= c.max_students THEN 'Full'
        ELSE 'Available'
    END AS status
FROM 
    courses c
LEFT JOIN 
    enrollments e ON c.course_id = e.course_id
GROUP BY 
    c.course_name, c.max_students;
*/

/*
--  31. Get Student Progress

SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS full_name,
    c.course_name,
    COALESCE(a.score, 'Not Assessed') AS score,
    CASE
        WHEN a.score IS NOT NULL THEN 
            CASE
                WHEN a.score >= 90 THEN 'A'
                WHEN a.score >= 80 THEN 'B'
                WHEN a.score >= 70 THEN 'C'
                WHEN a.score >= 60 THEN 'D' 
                ELSE 'F'
            END
        ELSE 'N/A'
    END AS grade
FROM 
    students s
LEFT JOIN 
    enrollments e ON s.student_id = e.student_id
LEFT JOIN 
    courses c ON e.course_id = c.course_id
LEFT JOIN 
    assessments a ON s.student_id = a.student_id AND c.course_id = a.course_id
ORDER BY 
    s.student_id, c.course_name;

*/


/*
-- 32. Enrollment Summary

SELECT 
    c.course_name,
    COUNT(e.student_id) AS enrolled_students,
    c.max_students,
    CASE 
        WHEN COUNT(e.student_id) >= c.max_students THEN 'Full'
        ELSE 'Available'
    END AS status
FROM 
    courses c
LEFT JOIN 
    enrollments e ON c.course_id = e.course_id
GROUP BY 
    c.course_name, c.max_students
ORDER BY 
    c.course_name;
*/


/*
-- 33. Average Score by Course

SELECT 
    c.course_name,
    AVG(a.score) AS average_score
FROM 
    courses c
LEFT JOIN 
    assessments a ON c.course_id = a.course_id
GROUP BY 
    c.course_name
ORDER BY 
    average_score DESC;

*/




/*
-- 34. Student Performance Report

SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_name,
    i.first_name || ' ' || i.last_name AS instructor_name,
    COALESCE(a.score, 'Not Assessed') AS score,
    CASE
        WHEN a.score IS NOT NULL THEN 
            CASE
                WHEN a.score >= 90 THEN 'A'
                WHEN a.score >= 80 THEN 'B'
                WHEN a.score >= 70 THEN 'C'
                WHEN a.score >= 60 THEN 'D'
                ELSE 'F'
            END
        ELSE 'N/A'
    END AS grade,
    c.start_date,
    c.end_date
FROM 
    students s
JOIN 
    enrollments e ON s.student_id = e.student_id
JOIN 
    courses c ON e.course_id = c.course_id
LEFT JOIN 
    assessments a ON s.student_id = a.student_id AND c.course_id = a.course_id
LEFT JOIN 
    instructors i ON c.instructor_id = i.instructor_id
ORDER BY 
    s.student_id, c.course_name;
*/

/*
-- 35. Instructor Course Load

SELECT 
    i.instructor_id,
    i.first_name || ' ' || i.last_name AS instructor_name,
    COUNT(c.course_id) AS course_count
FROM 
    instructors i
LEFT JOIN 
    courses c ON i.instructor_id = c.instructor_id
GROUP BY 
    i.instructor_id, i.first_name, i.last_name
ORDER BY 
    course_count DESC;
*/

/*
-- 36. Student Enrollment Count

SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    COUNT(e.course_id) AS enrollment_count
FROM 
    students s
LEFT JOIN 
    enrollments e ON s.student_id = e.student_id
GROUP BY 
    s.student_id, s.first_name, s.last_name
ORDER BY 
    enrollment_count DESC;
*/

/*
-- 37. List All Students with Their Latest Assessment Score
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    MAX(a.score) AS latest_score
FROM 
    students s
LEFT JOIN 
    assessments a ON s.student_id = a.student_id
GROUP BY 
    s.student_id, s.first_name, s.last_name;
*/

/*
-- 38. List All Courses with Their Start and End Dates
SELECT 
    c.course_name,
    c.start_date,
    c.end_date
FROM 
    courses c
ORDER BY 
    c.start_date;
*/

/*
-- 39. List All Students Enrolled in a Specific Course
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name
FROM 
    students s
JOIN 
    enrollments e ON s.student_id = e.student_id
WHERE 
    e.course_id = 1;  -- Change the course_id as needed
*/

/*
-- 40. List All Instructors Teaching More Than One Course
SELECT 
    i.instructor_id,
    i.first_name || ' ' || i.last_name AS instructor_name,
    COUNT(c.course_id) AS course_count
FROM 
    instructors i
JOIN 
    courses c ON i.instructor_id = c.instructor_id
GROUP BY 
    i.instructor_id, i.first_name, i.last_name
HAVING 
    COUNT(c.course_id) > 1;
*/

/*
-- 41. List All Courses with Their Average Scores
SELECT 
    c.course_name,
    AVG(a.score) AS average_score
FROM 
    courses c
LEFT JOIN 
    assessments a ON c.course_id = a.course_id
GROUP BY 
    c.course_name;
*/

/*
-- 42. List All Students with Their Enrollment Dates in a Specific Course
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    e.enrollment_date
FROM 
    students s
JOIN 
    enrollments e ON s.student_id = e.student_id
WHERE 
    e.course_id = 1;  -- Change the course_id as needed
*/

/*
-- 43. List All Courses with Their Instructors and Enrollment Status
SELECT 
    c.course_name,
    i.first_name || ' ' || i.last_name AS instructor_name,
    COUNT(e.student_id) AS enrolled_students,
    c.max_students,
    CASE 
        WHEN COUNT(e.student_id) >= c.max_students THEN 'Full'
        ELSE 'Available'
    END AS status
FROM 
    courses c
LEFT JOIN 
    instructors i ON c.instructor_id = i.instructor_id
LEFT JOIN 
    enrollments e ON c.course_id = e.course_id
GROUP BY 
    c.course_name, i.first_name, i.last_name, c.max_students;
*/

/*
-- 44. List All Students with Their Total Number of Assessments
SELECT 
    s.student_id,
    s.first_name || ' ' || s.last_name AS student_name,
    COUNT(a.assessment_id) AS total_assessments
FROM 
    students s
LEFT JOIN 
    assessments a ON s.student_id = a.student_id
GROUP BY 
    s.student_id, s.first_name, s.last_name;
*/